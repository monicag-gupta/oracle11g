cPrg6.c

/* Compile code without optimization option */
#include <stdio.h>
int main(void)
{
    const int local = 10; //non volatile gcc not using –O option
    int *ptr = (int*) &local;
 
    printf("Initial value of local : %d \n", local);
 
    *ptr = 100;
 
    printf("Modified value of local: %d \n", local);
 
    return 0;
}

When we compile code with “–save-temps” option of gcc it generates 3 output files
1) preprocessed code (having .i extention)
2) assembly code (having .s extention) and
3) object code (having .o option).
We compile code without optimization, that’s why the size of assembly code will be larger.
$ gcc cPrg6.c -o cPrg6 –save-temps 
$ ./cPrg6 
Initial value of local : 10 
Modified value of local: 100 
$ ls -l *.s 
-rw-r–r– 1 user user 731 2016-11-19 16:19 cPrg6.s 

For above code, compiler does optimization, that’s why the size of assembly code will reduce.
Output:
$ gcc -O3 aPrg6.c -o aPrg6 –save-temps
$ ./aPrg6
 Initial value of local : 10
 Modified value of local: 10
$ ls -l aPrg6.s
-rw-r–r– 1 user user 626 2016-11-19 16:21 volatile.s

change the code to make the const local volatile:
/* Compile code with optimization option */
#include <stdio.h>
 
int main(void)
{
    const volatile int local = 10;
    int *ptr = (int*) &local;
 
    printf("Initial value of local : %d \n", local);
 
    *ptr = 100;
 
    printf("Modified value of local: %d \n", local);
 
    return 0;
}


Output:
$ gcc -O3 aPrg6.c -o aPrg6 –save-temp
$ ./aPrg6
 Initial value of local : 10
 Modified value of local: 100
$ ls -l aPrg6.s
-rw-r–r– 1 user user 711 2016-11-19 16:22 volatile.s
  Note : The above codes are compiler specific and may not work on all compilers. 







cPrg2.c

#include <stdio.h>
#include <stdlib.h>
#define DEBUG 1
#ifdef DEBUG
#define debug_printf(...) printf(__VA_ARGS) 
#else 
#define debug_printf(...) 
#endif 
int main(int argc, char * argv[]){ 
     debug_printf("This is a debug message\n"); 
     return 0; 
}


cPrg3.c

#include<stdio.h>
#define NUM 10

int main()
{
// Define another macro if MACRO NUM is defined

#ifdef NUM
      #define MAX 20 
#endif

printf("MAX number is : %d",MAX);
}



cPrg4.c
#include<stdio.h>

void main()
{

#ifdef MAX 
    #define MIN 90
#else
    #define MIN 100
#endif

printf("MIN number : %d",MIN);
}
/*
Output :
MIN number : 100 */



cPrg5.c

#include<stdio.h>

int main(){

#ifdef __DATE__
         printf("%s",__DATE__);
    #else
         printf("__DATE__ is not defined");
    #endif

return 0;
}
/*
Output :

Current Date is Printed */











cPrg1.c

#include <stdio.h>
#include <stdlib.h>
#define INIT_X_VALUE 10 
#define INIT_Y_VALUE 100 
int main(int argc, char * argv[]){ 
     int x, y; 
     x = INIT_X_VALUE; 
     y = INIT_Y_VALUE; 
     printf("X is %d, Y is %d\n", x, y); 
     return 0;
}
